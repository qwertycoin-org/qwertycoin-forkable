name: Build check

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '*'            # We don't want this to run on release
  pull_request:

jobs:
  build-windows:
    name: Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@master

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Build
        shell: powershell
        id: build
        run: |
          $build_folder = "build"
          $sha = "${{ github.sha }}"
          $qwc_ver = $sha.SubString(0,7)
          $release_name = "qwertycoin-cli-win64-$qwc_ver"
          mkdir "$build_folder"
          cd "$build_folder"
          cmake -G "Visual Studio 16 2019" -A x64 -DBUILD_WITH_TOOLS:BOOL=TRUE -DBUILD_WITH_TESTS:BOOL=FALSE ..
          cmake --build . --config Release
          cd src/Release
          Compress-Archive -Path *.exe -DestinationPath "$release_name.zip"
          $sha256 = (Get-FileHash "$release_name.zip").Hash
          $asset_path = "./$build_folder/src/Release/$release_name.zip"
          mkdir "$release_name"
          cp *.exe "$release_name/"
          echo "::set-output name=sha256::${sha256}"
          echo "::set-output name=release_name::${release_name}.zip"
          echo "::set-output name=asset_path::${asset_path}"
          echo "::set-output name=qwc_ver::${qwc_ver}"
          echo "::set-output name=artifact_path::$build_folder/src/Release/$release_name"

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Mac builds on Catalina VM
  build-macos:
    name: macOS
    runs-on: macOS-latest
    env:
        CC: /usr/local/opt/llvm@8/bin/clang
        CXX: /usr/local/opt/llvm@8/bin/clang++
        LABEL: osx
        CCACHE_DIR: $GITHUB_WORKSPACE/.ccache
    steps:
      - uses: actions/checkout@master

      # Fetch Dependencies
      - name: Dependencies
        run: |
            brew install --force boost llvm@8 ccache
            brew link --overwrite llvm@8
            ln -s /usr/local/opt/llvm@8 /usr/local/opt/llvm

      - name: Retrieve ccache
        uses: actions/cache@v1
        with:
            path: .ccache
            key: ccache-osx

      # Configure project with cmake
      - name: Configure
        run: |
            mkdir build && cd build
            cmake -DBUILD_ALL:BOOL=TRUE ..

      # Build for macOS
      - name: Build
        run: |
            cd build
            cmake --build . --config Release

      # Prepare for deploy
      - name: Prepare for Deploy
        id: before_deploy
        env:
            COMMIT_SHA: ${{ github.sha }}
        run: |
            if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA::8}; fi
            cd build/src
            TARGETS="qwertyforkd simplewallet walletd"
            strip ${TARGETS}
            rm -rf qwertycoin-${TAG}
            mkdir qwertycoin-${TAG}
            cp ${TARGETS} qwertycoin-${TAG}/
            cp ../../LICENSE.txt qwertycoin-${TAG}/
            tar cvfz qwertycoin-${LABEL}-${TAG}.tar.gz qwertycoin-${TAG}/
            echo ::set-output name=binary_path::qwertycoin-${TAG}
            echo ::set-output name=artifact_name::qwertycoin-${LABEL}-${TAG}
            echo ::set-output name=file_name::qwertycoin-${LABEL}-${TAG}.tar.gz


      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1.0.1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            upload_url: ${{ github.event.release.upload_url }}
            asset_path: ./build/src/${{ steps.before_deploy.outputs.file_name }}
            asset_name: ${{ steps.before_deploy.outputs.file_name }}
            asset_content_type: application/gzip

      # Upload to GH Actions Artifacts
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
            name: ${{ steps.before_deploy.outputs.artifact_name }}
            path: ./build/src/${{ steps.before_deploy.outputs.binary_path }}

  build-ubuntu20:
    name: Ubuntu 20.04
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@master

      - name: Build
        id: build
        run: |
          build_folder="build"
          qwc_ver=${GITHUB_SHA::7}
          release_name=qwertycoin-cli-ubuntu20.04-"$qwc_ver"
          mkdir -p "$build_folder"
          cd "$build_folder"
          cmake -DBUILD_ALL:BOOL=TRUE ..
          cmake --build . --config Release
          mkdir -p "$release_name"
          exeFiles=()
          for f in src/*; do [[ -x $f && -f $f ]] && exeFiles+=( "$f" ); done
          strip "${exeFiles[@]}"
          cp "${exeFiles[@]}" "$release_name/"
          echo "::set-output name=release_name::${release_name}"
          echo "::set-output name=artifact_path::$build_folder/$release_name"

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-ubuntu18:
    name: Ubuntu 18.04
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@master

      - name: Build
        id: build
        run: |
          build_folder="build"
          qwc_ver=${GITHUB_SHA::7}
          release_name=qwertycoin-cli-ubuntu18.04-"$qwc_ver"
          mkdir -p "$build_folder"
          cd "$build_folder"
          cmake -DBUILD_ALL:BOOL=TRUE ..
          cmake --build . --config Release
          mkdir -p "$release_name"
          exeFiles=()
          ls -al src/
          for f in src/*; do [[ -x $f && -f $f ]] && exeFiles+=( "$f" ); done
          strip "${exeFiles[@]}"
          cp "${exeFiles[@]}" "$release_name/"
          echo "::set-output name=release_name::${release_name}"
          echo "::set-output name=artifact_path::$build_folder/$release_name"

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-ubuntu18-clang:
    name: Ubuntu 18.04 Clang 6
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@master

      - name: Build
        id: build

        env:
          CC: clang-6.0
          CXX: clang++-6.0

        run: |
          build_folder="build"
          qwc_ver=${GITHUB_SHA::7}
          release_name=qwertcoin-cli-ubuntu18.04-clang-6-"$qwc_ver"
          mkdir -p "$build_folder"
          cd "$build_folder"
          cmake -DBUILD_ALL:BOOL=TRUE ..
          cmake --build . --config Release
          mkdir -p "$release_name"
          exeFiles=()
          for f in src/*; do [[ -x $f && -f $f ]] && exeFiles+=( "$f" ); done
          strip "${exeFiles[@]}"
          cp "${exeFiles[@]}" "$release_name/"
          echo "::set-output name=release_name::${release_name}"
          echo "::set-output name=artifact_path::$build_folder/$release_name"

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}